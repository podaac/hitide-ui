# This is the main build pipeline that verifies and publishes the software
name: Build
# Controls when the workflow will run
on:
  # Triggers the workflow on push events
  push:
    branches: 
    - main 
    - develop
    - 'release/**'
    - 'feature/**' 
    - 'issue/**' 
    - 'issues/**' 
    - 'dependabot/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PROJECT_ NAME: podaac/hitide-ui

jobs:
  # First job in the workflow installs and verifies the software
  build:
    name: Build, Test, Deploy
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checkout
      - name: Checkout project to build and deploy
        uses: actions/checkout@v2

      ## Read the json file into the environment variables
      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: 'package.json'
          prefix: project

      ## Set environment variables
      - name: Configure Initial YAML file and environment variables
        run: |
          echo "THE_VERSION=${{ env.project_version }}" >> $GITHUB_ENV;
          echo "GIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV;
          GITHUB_REF_READABLE="${GITHUB_REF//\//-}"
          echo "GITHUB_REF_READABLE=${GITHUB_REF_READABLE}" >> $GITHUB_ENV

      ## NPM Tagging
      - name: Pre Alpha
        if: |
          startsWith(github.ref, 'refs/heads/issue') ||
          startsWith(github.ref, 'refs/heads/dependabot/') ||
          startsWith(github.ref, 'refs/heads/feature/')
        run: |
            echo "THE_ENV=sit" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=SIT" >> $GITHUB_ENV
            echo "THE_VERSION=$(npm --no-git-tag-version --allow-same-version version ${{ env.THE_VERSION }}-${GITHUB_SHA})" >> $GITHUB_ENV

      ## Set Alpha variables
      - name: Alpha
        if: github.ref == 'refs/heads/develop'
        run: |
            echo "THE_ENV=sit" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=SIT" >> $GITHUB_ENV
            echo "THE_VERSION=$(npm --no-git-tag-version version prerelease)" >> $GITHUB_ENV

      ## Bump RC Version
      - name: Bump rc version
        # If triggered by push to a release branch
        if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
        env:
          # True if the version already has a 'rc' pre-release identifier
          BUMP_RC: ${{ contains(env.project_version, 'rc') }}
          RELEASE_VERSION: ${THE_BRANCH//*\/}
        run: |
          if [ "$BUMP_RC" == true ]; then
            echo "THE_VERSION=$(npm --no-git-tag-version version prerelease --preid rc)" >> $GITHUB_ENV
          else
            echo "THE_VERSION=$(npm --no-git-tag-version version ${GITHUB_REF#refs/heads/release/}-rc.1)" >> $GITHUB_ENV
          fi

          echo "THE_ENV=uat" >> $GITHUB_ENV
          echo "TARGET_ENV_UPPERCASE=UAT" >> $GITHUB_ENV

      ## Set Release variables
      - name: Release
        if: ${{ startsWith(github.ref, 'refs/heads/main') }}
        run: |
            echo "THE_ENV=ops" >> $GITHUB_ENV
            echo "TARGET_ENV_UPPERCASE=OPS" >> $GITHUB_ENV
            echo "Modifying version number ${{ env.project_version}}"
            THE_VERSION=${{ env.project_version }}
            echo "THE_VERSION=${THE_VERSION//-*}" >> $GITHUB_ENV


      - name: Run Snyk as a blocking step
        uses: snyk/actions/node@master
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: >
              --org=${{ secrets.SNYK_ORG_ID }}
              --project-name=${{ github.repository }}
              --severity-threshold=high
              --fail-on=all


      - name: Run Snyk on Node
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: >
            --org=${{ secrets.SNYK_ORG_ID }}
            --project-name=${{ github.repository }}


      - name: Commit Version Bump
        # If building develop, a release branch, or main then we commit the version bump back to the repo
        if: |
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'    ||
          startsWith(github.ref, 'refs/heads/release')
        run: |
          git config --global user.name 'hitide-ui bot'
          git config --global user.email 'hitide-ui@noreply.github.com'
          git commit -am "/version ${{ env.THE_VERSION }}"
          git push

      - name: Push Tag
        if: |
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'    ||
          startsWith(github.ref, 'refs/heads/release')
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${{ env.THE_VERSION }}" -m "Version ${{ env.THE_VERSION }}"
          git push origin "${{ env.THE_VERSION }}"

      # Setup Node to install and test
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: NPM install & NPM Lint
        run: |
          npm install
          npm run build

      - name: Make Config Files
        run: |
          cat ./configs/hitideConfig-${{ env.THE_ENV }}.js > ./dist/hitideConfig.js
      
      ## echo '{ "earthDataAppClientId": "'"${{ secrets[format('EARTH_DATA_LOGIN_CLIENT_ID_{0}', env.TARGET_ENV_UPPERCASE)] }}"'",  "googleTagManagerId": "'"${{ secrets[format('GOOGLE_TAG_MANAGER_ID_{0}', env.TARGET_ENV_UPPERCASE)] }}"'"}' > ./dist/env.json

      ## Deployment
      - name: Set AWS Env Variables
        run: echo "AWS_ACCESS_KEY_ID=${{ secrets[format('AWS_ACCESS_KEY_ID_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}" >> $GITHUB_ENV |
             echo "AWS_SECRET_ACCESS_KEY=${{ secrets[format('AWS_SECRET_ACCESS_KEY_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}" >> $GITHUB_ENV

      - name: Configure AWS credentials 
        uses: aws-actions/configure-aws-credentials@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets[format('AWS_ACCESS_KEY_ID_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[format('AWS_SECRET_ACCESS_KEY_SERVICES_{0}', env.TARGET_ENV_UPPERCASE)] }}
        with:
          aws-region: us-west-2
          role-session-name: GitHubActions
      - run: aws sts get-caller-identity

      - name: Sync S3
        if: |
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'    ||
          contains(github.base_ref, 'main') ||
          ${{ github.event.head_commit.message }}  == "/github_actions deploy"
        run:
          aws s3 sync ./dist s3://podaac-services-${{ env.THE_ENV}}-hitide --exclude dataset-configs/* --exclude palettes/* --delete
