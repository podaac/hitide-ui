pipeline {
    agent none
    options {
        preserveStashes(buildCount: 5)
    }
    environment{
        VCS_CREDENTIALS_ID = "github_podaac"
        GHE_CREDENTIALS_ID = "github.jpl.nasa.gov_devops_pw"
        ARTIFACTORY_CREDENTIALS_ID = "jenkins.cae.artifactory"
        ARTIFACTORY_URL = "https://cae-artifactory.jpl.nasa.gov/artifactory"
        ARTIFACTORY_DOCKER_REGISTRY = "cae-artifactory.jpl.nasa.gov:16003"
        ARTIFACTORY_NPM_REPO = "artifactory.jpl.nasa.gov:443/artifactory/api/npm/npm-release-local/"
        SNYK_CREDENTIALS_ID = "snyk_api_key"
    }
    stages{
        stage("Checkout"){
            agent {
                docker {
                    image 'podaac/service/build-node-14:latest'
                    label 'devops1'
                    registryUrl "https://${env.ARTIFACTORY_DOCKER_REGISTRY}"
                }
            }
            steps{
                checkout([
                    $class: 'GitSCM',
                    branches: scm.branches,
                    extensions: scm.extensions + [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'WipeWorkspace'],
                        [$class: 'LocalBranch', localBranch: '**'],
                        [$class: 'PruneStaleBranch']
                    ],
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
                script{
                    def packageJson = readJSON file: 'package.json'
                    the_service = packageJson.name
                    the_version = packageJson.version
                    the_env = sh(returnStdout: true, script: "printenv").trim()
                    deploy_env = 'sit'
                }
                writeYaml file: 'build-info.yaml', data: ['service_name': the_service, 'source_service_version': the_version, 'build_environment': the_env, 'deploy_env': deploy_env], overwrite: true
                stash name: 'build-info', includes: 'build-info.yaml'
                echo "Checked out $the_service $the_version"
            }
        }
        stage("Skip Build"){
            when {
                anyOf{
                    changelog '^/version.*'
                    changelog '^/jenkins skip'
                }
            }
            agent {
                docker {
                    image 'podaac/service/build-node-14:latest'
                    label 'devops1'
                    registryUrl "https://${env.ARTIFACTORY_DOCKER_REGISTRY}"
                }
            }
            steps{
                echo "Build Skipped."
                script {
                    currentBuild.result = 'NOT_BUILT'
                }
            }
        }
        stage("Run Build"){
            when {
                not{
                    anyOf{
                        changelog '^/version.*'
                        changelog '^/jenkins skip'
                    }
                }
            }
            agent {
                docker {
                    image 'podaac/service/build-node-14:latest'
                    label 'devops1'
                    alwaysPull true
                    registryUrl "https://${env.ARTIFACTORY_DOCKER_REGISTRY}"
                }
            }
            stages{
                stage("Version"){
                    stages {
                        stage("Pre Alpha"){
                            when {
                                anyOf{
                                    branch 'feature/*'
                                    branch 'bugfix/*'
                                    changeRequest target: 'develop'
                                }
                            }
                            environment {
                                 GIT_COMMIT_SHORT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true).trim()
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    build_info.build_service_version = sh(returnStdout: true, script:
                                        "npm --no-git-tag-version --allow-same-version version ${build_info.source_service_version}-${GIT_BRANCH.replaceAll('/', '-')}.${BUILD_NUMBER}"
                                    ).trim()
                                    build_info.artifactory_npm_repo = "artifactory.jpl.nasa.gov:443/artifactory/api/npm/npm-develop-local/"
                                    build_info.deploy_env = "sit"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Alpha"){
                            when {
                                branch 'develop'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = sh(returnStdout: true, script: "npm --no-git-tag-version version prerelease").trim()
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_npm_repo = "artifactory.jpl.nasa.gov:443/artifactory/api/npm/npm-stage-local/"
                                    build_info.deploy_env = "sit"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Minor"){
                            when {
                                allOf{
                                    branch 'release/*'
                                    not{
                                        changeRequest()
                                    }
                                }
                            }
                            steps{

                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    build_info.deploy_env = "uat"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'

                                dir("temp"){

                                    withCredentials([usernamePassword(credentialsId: env.GHE_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                        checkout([
                                            $class: 'GitSCM',
                                            branches: [[name: 'develop']],
                                            extensions: [
                                                [$class: 'LocalBranch', localBranch: '**']
                                            ],
                                            userRemoteConfigs: scm.userRemoteConfigs
                                        ])

                                        unstash name: 'build-info'

                                        script{
                                            build_info = readYaml file: 'build-info.yaml'

                                            cur_ver = build_info['source_service_version']
                                            string_version = env.BRANCH_NAME.split('/')[-1]
                                            patch_version = string_version.tokenize('.')[-1]

                                            // Only update develop on releases that aren't rc and releases that aren't bug fixes
                                            if(!cur_ver.contains("rc") && patch_version == "0"){
                                                sh("""
                                                    git config --local user.name "podaac"
                                                    git config --local user.email podaac-tva@jpl.nasa.gov
                                                    git config --local credential.helper "!f() { echo username=\$GIT_USERNAME; echo password=\$GIT_PASSWORD; }; f"
                                                    npm version --no-git-tag-version ${env.BRANCH_NAME.split('/')[-1]}
                                                    npm version preminor -f -m '/version %s'
                                                    git push origin HEAD:develop
                                                """)
                                            }
                                            else{
                                                echo("SKIP UPDATING DEVELOP VERSION")
                                            }
                                        }
                                    }
                                    deleteDir()
                                }
                            }
                            post {
                                always {
                                    sh "git config --local --unset credential.helper || true"
                                }
                            }
                        }
                        stage("Release Candidate"){
                            when {
                                changeRequest target: 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    cur_ver = build_info['source_service_version']
                                    if(cur_ver.contains("rc")){
                                        // increment release candidate version
                                        the_version = sh(returnStdout: true, script: "npm --no-git-tag-version version prerelease --preid rc").trim()
                                    }else{
                                        // set release candidate to version 1 and on release branch name
                                        the_version = sh(returnStdout: true, script: "npm --no-git-tag-version version ${env.CHANGE_BRANCH.split('/')[-1]}-rc.1").trim()
                                    }
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_npm_repo = "artifactory.jpl.nasa.gov:443/artifactory/api/npm/npm-stage-local/"
                                    build_info.deploy_env = "uat"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Release"){
                            when {
                                branch 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    the_version = build_info['source_service_version'].split('-')[0]
                                    build_info.build_service_version = the_version
                                    build_info.artifactory_npm_repo = "artifactory.jpl.nasa.gov:443/artifactory/api/npm/npm-release-local/"
                                    build_info.deploy_env = "ops"
                                }
                                sh "npm --no-git-tag-version version $the_version"
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                    }
                }
                stage("Build Software"){
                    steps{
                        unstash name: 'build-info'
                        script{
                            build_info = readYaml file: 'build-info.yaml'
                        }
                        // Build and configure correct hitide config javascript file
                        sh """
                        npm install
                        npm run build
                        cat ./configs/hitideConfig-${build_info.deploy_env}.js > ./dist/hitideConfig.js
                        tar -czvf hitide-${build_info.build_service_version}.tar.tgz dist/
                        """
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: 'hitide-*.tar.tgz'
                            stash name: 'artifacts', includes: 'hitide-*.tar.tgz'
                        }
                    }
                }
                stage("Publish"){
                    when {
                        anyOf{
                            branch 'develop'
                            branch 'master'
                            changeRequest target: 'master'
                            changelog '^/jenkins deploy'
                        }
                    }
                    stages{
                        stage("Tag Version"){
                            environment{
                                THE_BRANCH = "${(env.CHANGE_BRANCH?:env.BRANCH_NAME)}"
                            }
                            when {
                                anyOf {
                                    branch 'develop'
                                    branch 'master'
                                    changeRequest target: 'master'
                                }
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                }
                                withCredentials([usernamePassword(credentialsId: env.GHE_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                                    sh("""
                                        git config --local user.name "podaac"
                                        git config --local user.email podaac-tva@jpl.nasa.gov
                                        git config --local credential.helper "!f() { echo username=\$GIT_USERNAME; echo password=\$GIT_PASSWORD; }; f"
                                        git commit -am '/version ${build_info.build_service_version}'
                                    """)
                                    script{
                                        if(env.BRANCH_NAME == 'master'){
                                            sh "git tag -a ${build_info.build_service_version} -m 'Release of v${build_info.build_service_version}'"
                                        }else{
                                            sh "git tag ${build_info.build_service_version}"
                                        }
                                    }
                                    sh("""
                                        git push origin HEAD:${env.THE_BRANCH}
                                        git push origin ${build_info.build_service_version}
                                    """)
                                }
                            }
                            post {
                                always {
                                    sh "git config --local --unset credential.helper || true"
                                }
                                failure {
                                    // If the push fails, delete the local tag so when the build reruns it won't fail because the tag already exists
                                    sh "git tag -d ${build_info.build_service_version}"
                                }
                            }
                        }
                        stage("Upload to Artifactory"){
                            steps{
                                unstash name: 'artifacts'
                                unstash name: 'build-info'
                                withCredentials([usernamePassword(credentialsId: env.ARTIFACTORY_CREDENTIALS_ID, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PASSWORD')]){
                                    script{
                                        pwbase64 = sh(returnStdout: true, script: "echo -n ${env.ARTIFACTORY_PASSWORD} | base64").trim()
                                    }
                                    dir(".npm"){
                                        writeFile file:".npmrc", text:"""\
                                        @gov.nasa.jpl.podaac:registry=https://${build_info.artifactory_npm_repo}
                                        //${build_info.artifactory_npm_repo}:_password=${pwbase64}
                                        //${build_info.artifactory_npm_repo}:username=${env.ARTIFACTORY_USER}
                                        //${build_info.artifactory_npm_repo}:email=podaac-tva@jpl.nasa.gov
                                        //${build_info.artifactory_npm_repo}:always-auth=true
                                        """.stripIndent()
                                    }
                                    sh "npm publish --userconfig ${env.WORKSPACE}/.npm/.npmrc --registry https://${build_info.artifactory_npm_repo} --scope=@gov.nasa.jpl.podaac"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage("Deploy"){
            when {
                not{
                    anyOf {
                        changelog '^/version.*'
                        changelog '^/jenkins skip'
                    }
                }
                anyOf{
                    branch 'develop'
                    branch 'master'
                    changeRequest target: 'master'
                    changelog '^/jenkins deploy'
                }
            }
            agent {
                docker {
                    image "${env.ARTIFACTORY_DOCKER_REGISTRY}/podaac/service/deploy-terraform-0.12.31"
                    label 'devops1'
                    alwaysPull true
                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                }
            }
            options {
                skipDefaultCheckout()
            }
            steps{
                unstash 'artifacts'
                script {
                    hitide_tar_file = sh(returnStdout: true, script: 'find . -name hitide-*.tar.tgz -type f -print -quit').trim()
                }
                sh("tar -xzvf ${hitide_tar_file}")
                unstash name: 'build-info'
                script{
                    build_info = readYaml file: 'build-info.yaml'
                }
                echo "Publishing ${build_info.build_service_version} to ${build_info.deploy_env} S3"
                dir('terraform'){
                    sh "bin/deploy.sh -v ${build_info.deploy_env} --app-version ${build_info.build_service_version}"
                    sh "terraform output hitide-bucket-name"
                    script{
                        bucket_name = sh(returnStdout: true, script: "terraform output hitide-bucket-name").trim()
                    }
                }
                sh("aws s3 sync ./dist s3://${bucket_name} --exclude dataset-configs/* --exclude palettes/* --delete --profile ngap-service-${build_info.deploy_env}")
            }
        }
    }
}
